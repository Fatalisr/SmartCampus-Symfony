{% extends 'base_referent.html.twig' %}

{% block body %}
    <link rel="stylesheet" href="{{ asset('detail_SA.css') }}">
    <script src="https://d3js.org/d3.v4.js"></script>
    <script src="{{ asset('graph.js') }}"></script>
    <div class="fse">
        <p> {{ sa.name }}</p>
        <p>{{ sa.currentRoom.name }}</p>
        {% if sa.state == 'A_INSTALLER' %}
            <p>ðŸŸ  Installation</p>
        {% elseif sa.state == 'ACTIF' %}
            <p>ðŸŸ¢ Actif</p>
        {% elseif sa.state == 'MAINTENANCE' %}
            <p>ðŸ”´ Maintenance</p>
        {% endif %}
        <button type="button" onclick="goHome()" id="goHomeBtn">Retour</button>

    </div>
    {% if sa.state == 'ACTIF' %}
        <div id="changeTime">
            <button id="btGraph" onclick="traitementDonneeCO2(donneesCO2T);traitementDonneeTemp(donneesTEMPT);traitementDonneeHum(donneesHUMT);showAlert();">JOUR</button>
            <button id="btGraph" onclick="traitementDonneeCO2(donneesCO2LW);traitementDonneeHum(donneesHUMLW);traitementDonneeTemp(donneesTEMPLW);showAlert();">SEMAINE</button>
            <div id="alertValue"></div>
        </div>
        <section id="mainsection">
            <!-- graph temp -->
            <div class="pSA" id="pSAR">
                <div id="graph1"></div>
            </div>

            <div class="pSA"> <!-- maintenance -->
                {{ form_start(form) }}
                <div id="form_header">
                    <h1>Demande de Maintenance</h1>
                </div>
                <div class="form_line">
                    {{ form_widget(form.message) }}
                </div>
                <div id="submit_btn">
                    <button type="button" id="maint" onclick="openPopup('popupCS')">Envoyer</button>
                    <div id="popupCS" class="popup">
                        <div class="popup-content">
                            <span class="close" onclick="closePopup('popupCS')">&times;</span>
                            <span>Voullez-vous vraiment dÃ©marrer la maintenance de ce systÃ¨me d'acquisition</span>
                            <div>
                                <button id="non" type="button" onclick="closePopup('popupCS')">Non</button>
                                {{ form_widget(form.save) }}
                            </div>
                        </div>
                    </div>
                </div>
                {{ form_end(form) }}
            </div>

            <!-- graph CO2 -->
            <div class="pSA" id="pSAR">
                <div id="graph3"></div>
            </div>

            <!-- graph humi-->
            <div class="pSA" id="pSAR">
                <div id="graph2"></div>
            </div>

        </section>
    {% else %}
        <section id="mainsection">
            <div class="centre">
                <img src="{{ asset('images/noWifi.png') }}" alt="no data">
                <p>Aucun donnÃ©e disponible</p>
            </div>
        </section>
    {% endif %}
    <script>
        printAlertTEMP = 0;
        printAlertCO2 = 0;
        printAlertHUM = 0;
        nbAlertTEMP = 0;
        nbAlertCO2 = 0;
        nbAlertHUM = 0;

        function openPopup(popupId) {
            document.getElementById(popupId).style.display = 'block';
        }
        function closePopup(popupId) {
            document.getElementById(popupId).style.display = 'none';
        }
        function showAlert() {
            document.getElementById("alertValue").innerText = "Aucun Alerte";
            if(printAlertHUM)
            {
                nb = nbAlertHUM;
                document.getElementById("alertValue").innerHTML = "ðŸš¨ Alerte HumiditÃ©<br>"+nb+" Alertes";
            }
            if(printAlertCO2)
            {
                nb = nbAlertCO2;
                document.getElementById("alertValue").innerHTML = "ðŸš¨ Alerte CO2<br>"+nb+" Alertes";
            }
            if(printAlertTEMP)
            {
                nb = nbAlertTEMP;
                document.getElementById("alertValue").innerHTML = "ðŸš¨ Alerte TempÃ©rature<br>"+nb+" Alertes";
            }
            if(printAlertTEMP && printAlertHUM)
            {
                nb = nbAlertTEMP+nbAlertHUM;
                document.getElementById("alertValue").innerHTML = "ðŸš¨ Alerte TempÃ©rature et HumiditÃ©<br>"+nb+" Alertes";
            }
            if(printAlertHUM && printAlertCO2)
            {
                nb = nbAlertHUM+nbAlertCO2;
                document.getElementById("alertValue").innerHTML = "ðŸš¨ Alerte HumiditÃ© et CO2<br>"+nb+" Alertes";
            }
            if(printAlertTEMP && printAlertCO2)
            {
                nb = nbAlertTEMP+nbAlertCO2;
                document.getElementById("alertValue").innerHTML = "ðŸš¨ Alerte TempÃ©rature et CO2<br>"+nb+" Alertes";
            }
            if(printAlertTEMP && printAlertHUM && printAlertCO2)
            {
                nb = nbAlertTEMP+nbAlertHUM+nbAlertCO2;
                document.getElementById("alertValue").innerHTML = "ðŸš¨ Alerte sur toutes les donnÃ©es<br>"+nb+" Alertes";
            }
            //Remise Ã  zÃ©ro des variables
            printAlertTEMP = 0;
            printAlertCO2 = 0;
            printAlertHUM = 0;
            nbAlertTEMP = 0;
            nbAlertCO2 = 0;
            nbAlertHUM = 0;
        }
        window.addEventListener('resize', function() {
            // Appeler la fonction reloadPage Ã  chaque redimensionnement
            location.reload();
        });
        function goHome(){
            window.location.href = '/referent';
        }

        //Read the data and create the graph
        function traitementDonneeTemp(data) {
            document.getElementById("graph1").innerHTML = "";
            data_date_value = [];
            for (i = 0; i < data.length; i++) {
                data_date_value.push([data[i]["dateCapture"], data[i]["valeur"]]);
                if (data[i]["valeur"] > 21 || data[i]["valeur"] < 17)
                {
                    printAlertTEMP = 1;
                    nbAlertTEMP += 1;
                }
            }
            // Dimension de l'image SVG
            var marginTop = (document.getElementById("pSAR").offsetWidth)*0.05,
                marginRight = 10,
                marginBottom = (document.getElementById("pSAR").offsetWidth)*0.05,
                marginLeft= 35,
                width = (document.getElementById("pSAR").offsetWidth) - marginLeft - marginRight,
                height = ((document.getElementById("pSAR").offsetHeight)) - marginTop - marginBottom;

            // append the svg object to the body of the page
            var svg1 = d3.select("#graph1")
                .append("svg")
                .attr("width",  width )
                .attr("height", height + marginTop + marginBottom)
                .append("g")
                .attr("transform",
                    "translate(" + marginLeft + "," + marginTop + ")");

            d_array =  [];
            for (let i = 0; i < data_date_value.length; i++)
            {
                d_array.push({ dateCapture : d3.timeParse("%Y-%m-%d %H:%M:%S")(data_date_value[i][0]), valeur : data_date_value[i][1] });
            }
            // Add X axis --> it is a date format
            x = d3.scaleTime()
                .domain([d3.min(d_array, function(d) { return d.dateCapture; }),d3.max(d_array, function(d) { return d.dateCapture; })])
                .range([ 0, width ]);
            svg1.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));
            /*.attr("text-anchor", "start")
            .text("â†‘ Daily close ($)");*/

            // Add Y axis
            y = d3.scaleLinear()
                .domain([-1,35])
                .range([ height, 0 ]);
            svg1.append("g")
                .call(d3.axisLeft(y));

            // Add a label to the graph
            svg1.append("text")
                .attr("class", "y label")
                .attr("text-anchor", "start")
                .attr("x", -marginLeft)
                .attr("y", -5)
                .text("TempÃ©rature (Â°C)");

            // Add the line
            svg1.append("path")
                .datum(d_array)
                .attr("fill", "none")
                .attr("stroke", "blue")
                .attr("stroke-width",2)
                .attr("d", d3.line()
                    .x(function(d) { return x(d.dateCapture) })
                    .y(function(d) { return y(d.valeur) })
                )
            // PremiÃ¨re borne Ã  21Â°C
            svg1.append('line')
                .style("stroke", "red")
                .style("stroke-width", 2)
                .attr("x1", 0)
                .attr("y1", (height/36)*13.5)
                .attr("x2", width)
                .attr("y2", (height/36)*13.5);
            // DeuxiÃ¨me borne Ã  17Â°C
            svg1.append('line')
                .style("stroke", "red")
                .style("stroke-width", 2)
                .attr("x1", 0)
                .attr("y1", (height/36)*18)
                .attr("x2", width)
                .attr("y2", (height/36)*18);
        }
        function traitementDonneeHum(data) {
            document.getElementById("graph2").innerHTML = "";
            data_date_value = [];
            for(i = 0 ; i < data.length ; i++)
            {
                data_date_value.push([data[i]["dateCapture"],data[i]["valeur"]]);
                if(data[i]["valeur"] > 70)
                {
                    printAlertHUM += 1;
                    nbAlertHUM += 1;
                }
            }
            // Dimension de l'image SVG
            var marginTop = (document.getElementById("pSAR").offsetWidth)*0.05,
                marginRight = 10,
                marginBottom = (document.getElementById("pSAR").offsetWidth)*0.05,
                marginLeft= 35,
                width = (document.getElementById("pSAR").offsetWidth) - marginLeft - marginRight,
                height = ((document.getElementById("pSAR").offsetHeight)) - marginTop - marginBottom;

            // append the svg object to the body of the page
            var svg1 = d3.select("#graph2")
                .append("svg")
                .attr("width",  width )
                .attr("height", height + marginTop + marginBottom)
                .append("g")
                .attr("transform",
                    "translate(" + marginLeft + "," + marginTop + ")");

            d_array =  [];
            for (let i = 0; i < data_date_value.length; i++)
            {
                d_array.push({ dateCapture : d3.timeParse("%Y-%m-%d %H:%M:%S")(data_date_value[i][0]), valeur : data_date_value[i][1] });
            }
            // Add X axis --> it is a date format
            x = d3.scaleTime()
                .domain([d3.min(d_array, function(d) { return d.dateCapture; }),d3.max(d_array, function(d) { return d.dateCapture; })])
                .range([ 0, width ]);
            svg1.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));
            /*.attr("text-anchor", "start")
            .text("â†‘ Daily close ($)");*/

            // Add Y axis
            y = d3.scaleLinear()
                .domain([0,100])
                .range([ height, 0 ]);
            svg1.append("g")
                .call(d3.axisLeft(y));

            // Add a label to the graph
            svg1.append("text")
                .attr("class", "y label")
                .attr("text-anchor", "start")
                .attr("x", -marginLeft)
                .attr("y", -5)
                .text("HumiditÃ© (%)");

            // Add the line
            svg1.append("path")
                .datum(d_array)
                .attr("fill", "none")
                .attr("stroke", "blue")
                .attr("stroke-width",2)
                .attr("d", d3.line()
                    .x(function(d) { return x(d.dateCapture) })
                    .y(function(d) { return y(d.valeur) })
                )

            // Borne Ã  70% d'humiditÃ©
            svg1.append('line')
                .style("stroke", "red")
                .style("stroke-width", 2)
                .attr("x1", 0)
                .attr("y1", (height/10)*3)
                .attr("x2", width)
                .attr("y2", (height/10)*3);
        }
        function traitementDonneeCO2(data) {
            document.getElementById("graph3").innerHTML = "";
            data_date_value = [];
            for(i = 0 ; i < data.length ; i++)
            {
                data_date_value.push([data[i]["dateCapture"],data[i]["valeur"]]);
                if(data[i]["valeur"] > 1000)
                {
                    printAlertCO2 += 1;
                    nbAlertCO2 += 1;
                }
            }
            // Dimension de l'image SVG
            var marginTop = (document.getElementById("pSAR").offsetWidth)*0.05,
                marginRight = 10,
                marginBottom = (document.getElementById("pSAR").offsetWidth)*0.05,
                marginLeft= 35,
                width = (document.getElementById("pSAR").offsetWidth) - marginLeft - marginRight,
                height = ((document.getElementById("pSAR").offsetHeight)) - marginTop - marginBottom;

            // append the svg object to the body of the page
            var svg1 = d3.select("#graph3")
                .append("svg")
                .attr("width",  width )
                .attr("height", height + marginTop + marginBottom)
                .append("g")
                .attr("transform",
                    "translate(" + marginLeft + "," + marginTop + ")");

            d_array =  [];
            for (let i = 0; i < data_date_value.length; i++)
            {
                d_array.push({ dateCapture : d3.timeParse("%Y-%m-%d %H:%M:%S")(data_date_value[i][0]), valeur : data_date_value[i][1] });
            }
            // Add X axis --> it is a date format
            x = d3.scaleTime()
                .domain([d3.min(d_array, function(d) { return d.dateCapture; }),d3.max(d_array, function(d) { return d.dateCapture; })])
                .range([ 0, width ]);
            svg1.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));
            /*.attr("text-anchor", "start")
            .text("â†‘ Daily close ($)");*/

            // Add Y axis
            y = d3.scaleLinear()
                .domain([0,2000])
                .range([ height, 0 ]);
            svg1.append("g")
                .call(d3.axisLeft(y));

            // Add a label to the graph
            svg1.append("text")
                .attr("class", "y label")
                .attr("text-anchor", "start")
                .attr("x", -marginLeft)
                .attr("y", -5)
                .text("CO2 (ppm)");

            // Add the line
            svg1.append("path")
                .datum(d_array)
                .attr("fill", "none")
                .attr("stroke", "blue")
                .attr("stroke-width",2)
                .attr("d", d3.line()
                    .x(function(d) { return x(d.dateCapture) })
                    .y(function(d) { return y(d.valeur) })
                )
            // Borne Ã  1300
            svg1.append('line')
                .style("stroke", "red")
                .style("stroke-width", 2)
                .attr("x1", 0)
                .attr("y1", (height/20)*10)
                .attr("x2", width)
                .attr("y2", (height/20)*10);
        }

        // DonnÃ©es du jour
        donneesCO2T = '{{ donneesCO2T }}';
        donneesCO2T = donneesCO2T.replace(/&quot;/ig,'\"');
        donneesCO2T = JSON.parse(donneesCO2T);
        donneesHUMT = '{{ donneesHUMT }}';
        donneesHUMT = donneesHUMT.replace(/&quot;/ig,'\"');
        donneesHUMT = JSON.parse(donneesHUMT);
        donneesTEMPT = '{{ donneesTEMPT }}';
        donneesTEMPT = donneesTEMPT.replace(/&quot;/ig,'\"');
        donneesTEMPT = JSON.parse(donneesTEMPT);
        // DonnÃ©es de la semaine
        donneesCO2LW = '{{ donneesCO2LW }}';
        donneesCO2LW = donneesCO2LW.replace(/&quot;/ig,'\"');
        donneesCO2LW = JSON.parse(donneesCO2LW);
        donneesHUMLW = '{{ donneesHUMLW }}';
        donneesHUMLW = donneesHUMLW.replace(/&quot;/ig,'\"');
        donneesHUMLW = JSON.parse(donneesHUMLW);
        donneesTEMPLW = '{{ donneesTEMPLW }}';
        donneesTEMPLW = donneesTEMPLW.replace(/&quot;/ig,'\"');
        donneesTEMPLW = JSON.parse(donneesTEMPLW);

        traitementDonneeCO2(donneesCO2T);
        traitementDonneeTemp(donneesTEMPT);
        traitementDonneeHum(donneesHUMT);
        showAlert();


    </script>
{% endblock %}
