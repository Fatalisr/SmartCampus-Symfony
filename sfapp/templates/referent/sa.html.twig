{% extends 'base_referent.html.twig' %}

{% block body %}
    <link rel="stylesheet" href="{{ asset('detail_SA.css') }}">
    <script src="https://d3js.org/d3.v4.js"></script>
    <script src="{{ asset('graph.js') }}"></script>
    <div class="fse">
        <p> {{ nom }}</p>
        <p>{{ salle }}</p>
        {% if etat == 'A_INSTALLER' %}
            <p>ðŸŸ  Installation</p>
        {% elseif etat == 'ACTIF' %}
            <p>ðŸŸ¢ Actif</p>
        {% elseif etat == 'MAINTENANCE' %}
            <p>ðŸ”´ Maintenance</p>
        {% endif %}
        <a id="maint" href="{{ path("app_referent") }}"><span>Retour</span></a>
    </div>
    {% if etat == 'ACTIF' %}
        <section id="mainsection">
            <aside>
                <div class="pSAr">
                    {{ form_start(form) }}
                    <div id="form_header">
                        <h1>Demande de Maintenance</h1>
                    </div>
                    <div class="form_line">
                        {{ form_widget(form.message) }}
                    </div>
                    <div id="submit_btn">
                        <a id="maint" onclick="openPopup('popupCS')">Envoyer</a>
                        <div id="popupCS" class="popup">
                            <div class="popup-content">
                                <span class="close" onclick="closePopup('popupCS')">&times;</span>
                                <span>Voullez-vous vraiment dÃ©marrer la maintenance de ce systÃ¨me d'acquisition</span>
                                <div>
                                    <button id="non" type="button" onclick="closePopup('popupCS')">Non</button>
                                    {{ form_widget(form.save) }}
                                </div>
                            </div>
                        </div>
                    </div>
                    {{ form_end(form) }}
                </div>
                <div class="pSAr" id="pSAR">
                    <div id="graph3"></div>
                </div>
            </aside>
            <section id="left">
                <div class="pSAl" id="pSAl">
                    <div id="graph1"></div>
                    <div id="graph2"></div>
                </div>
            </section>
        </section>
    {% else %}
        <section id="mainsection">
            <div class="centre">
                <img src="{{ asset('images/noWifi.png') }}" alt="no data">
                <p>Aucun donnÃ©e disponible</p>
            </div>
        </section>

    {% endif %}
    <script>
        function openPopup(popupId) {
            document.getElementById(popupId).style.display = 'block';
        }

        function closePopup(popupId) {
            document.getElementById(popupId).style.display = 'none';
        }
        //Read the data
        function traitementDonneeTemp() {
            // Dimension de l'image SVG
            var marginTop = (document.getElementById("pSAl").offsetWidth)*0.05,
                marginRight = 10,
                marginBottom = (document.getElementById("pSAl").offsetWidth)*0.05,
                marginLeft= 20,
                width = (document.getElementById("pSAl").offsetWidth) - marginLeft - marginRight,
                height = ((document.getElementById("pSAl").offsetHeight)/2) - marginTop - marginBottom;

            // Ajout de l'image SVG dans la balise prÃ©vu
            var svg1 = d3.select("#graph1")
                .append("svg")
                .attr("width",  width )
                .attr("height", height + marginTop + marginBottom)
                .append("g")
                .attr("transform",
                    "translate(" + marginLeft + "," + marginTop + ")");
            d_array =  [];
            // Ajout des donnÃ©es du fichier Json dans un tableau
            for (let i = 0; i < jsondata.length; i++)
            {
                d_array.push({ dateCapture : d3.timeParse("%Y-%m-%d %H:%M:%S")(jsondata[i].dateCapture), valeur : jsondata[i].valeur });
            }
            console.log(d_array)
            // Axe X -> Date de la donnÃ©e
            x = d3.scaleTime()
                .domain([d3.min(d_array, function(d) { return d.dateCapture; }),d3.max(d_array, function(d) { return +d.dateCapture; })])
                .range([ 0, width ]);
            svg1.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));

            // Axe Y -> Temp
            y = d3.scaleLinear()
                .domain([0,25])
                .range([ height, 0 ]);
            svg1.append("g")
                .call(d3.axisLeft(y));

            svg1.append("text")
                .attr("class", "y label")
                .attr("text-anchor", "start")
                .attr("x", -marginLeft)
                .attr("y", -5)
                .text("TempÃ©rature (Â°C)");

            // CrÃ©ation de la courbe qui passe par tous les points et ajout de la courbe au dessin
            svg1.append("path")
                .datum(d_array)
                .attr("fill", "none")
                .attr("stroke", "blue")
                .attr("stroke-width",2)
                .attr("d", d3.line()
                    .x(function(d) { return x(d.dateCapture) })
                    .y(function(d) { return y(d.valeur) })
                )
        }
        function traitementDonneeHum() {
            // set the dimensions and margins of the graph
            var marginTop = (document.getElementById("pSAl").offsetWidth)*0.05,
                marginRight = 10,
                marginBottom = (document.getElementById("pSAl").offsetWidth)*0.05,
                marginLeft= 25,
                width = (document.getElementById("pSAl").offsetWidth) - marginLeft - marginRight,
                height = ((document.getElementById("pSAl").offsetHeight)/2) - marginTop - marginBottom;

            // append the svg object to the body of the page
            var svg1 = d3.select("#graph2")
                .append("svg")
                .attr("width",  width )
                .attr("height", height + marginTop + marginBottom)
                .append("g")
                .attr("transform",
                    "translate(" + marginLeft + "," + marginTop + ")");
            d_array =  [];
            for (let i = 0; i < jsondata.length; i++)
            {
                d_array.push({ dateCapture : d3.timeParse("%Y-%m-%d %H:%M:%S")(jsondata[i].dateCapture), valeur : jsondata[i].valeur });
            }
            console.log(d_array)
            // Add X axis --> it is a date format
            x = d3.scaleTime()
                .domain([d3.min(d_array, function(d) { return d.dateCapture; }),d3.max(d_array, function(d) { return +d.dateCapture; })])
                .range([ 0, width ]);
            svg1.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));
            /*.attr("text-anchor", "start")
            .text("â†‘ Daily close ($)");*/

            // Add Y axis
            y = d3.scaleLinear()
                .domain([0,100])
                .range([ height, 0 ]);
            svg1.append("g")
                .call(d3.axisLeft(y));

            svg1.append("text")
                .attr("class", "y label")
                .attr("text-anchor", "start")
                .attr("x", -marginLeft)
                .attr("y", -5)
                .text("HumiditÃ© (%)");

            // Add the line
            svg1.append("path")
                .datum(d_array)
                .attr("fill", "none")
                .attr("stroke", "blue")
                .attr("stroke-width",2)
                .attr("d", d3.line()
                    .x(function(d) { return x(d.dateCapture) })
                    .y(function(d) { return y(d.valeur) })
                )
        }
        function traitementDonneeCO2() {
            // set the dimensions and margins of the graph
            var marginTop = (document.getElementById("pSAR").offsetWidth)*0.05,
                marginRight = 10,
                marginBottom = (document.getElementById("pSAR").offsetWidth)*0.05,
                marginLeft= 35,
                width = (document.getElementById("pSAR").offsetWidth) - marginLeft - marginRight,
                height = ((document.getElementById("pSAR").offsetHeight)) - marginTop - marginBottom;

            // append the svg object to the body of the page
            var svg1 = d3.select("#graph3")
                .append("svg")
                .attr("width",  width )
                .attr("height", height + marginTop + marginBottom)
                .append("g")
                .attr("transform",
                    "translate(" + marginLeft + "," + marginTop + ")");
            d_array =  [];
            for (let i = 0; i < jsondata.length; i++)
            {
                d_array.push({ dateCapture : d3.timeParse("%Y-%m-%d %H:%M:%S")(jsondata[i].dateCapture), valeur : jsondata[i].valeur });
            }
            console.log(d_array)
            // Add X axis --> it is a date format
            x = d3.scaleTime()
                .domain([d3.min(d_array, function(d) { return d.dateCapture; }),d3.max(d_array, function(d) { return +d.dateCapture; })])
                .range([ 0, width ]);
            svg1.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));
            /*.attr("text-anchor", "start")
            .text("â†‘ Daily close ($)");*/

            // Add Y axis
            y = d3.scaleLinear()
                .domain([0,2000])
                .range([ height, 0 ]);
            svg1.append("g")
                .call(d3.axisLeft(y));

            svg1.append("text")
                .attr("class", "y label")
                .attr("text-anchor", "start")
                .attr("x", -marginLeft)
                .attr("y", -5)
                .text("CO2 (ppm)");

            // Add the line
            svg1.append("path")
                .datum(d_array)
                .attr("fill", "none")
                .attr("stroke", "blue")
                .attr("stroke-width",2)
                .attr("d", d3.line()
                    .x(function(d) { return x(d.dateCapture) })
                    .y(function(d) { return y(d.valeur) })
                )
        }

        d3.json("{{ asset("data/data_example_temp.json") }}", function(datafromserver) {
            jsondata = datafromserver;
            traitementDonneeTemp();
        });
        d3.json("{{ asset("data/data_example_hum.json") }}", function(datafromserver) {
            jsondata = datafromserver;
            traitementDonneeHum();
        });
        d3.json("{{ asset("data/data_example_co2.json") }}", function(datafromserver) {
            jsondata = datafromserver;
            traitementDonneeCO2();
        });

    </script>
{% endblock %}
